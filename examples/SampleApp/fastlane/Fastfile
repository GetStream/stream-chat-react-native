# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
default_platform(:ios)


before_all do
  if is_ci
    setup_ci()
  end
end


desc "Installs all Certs and Profiles necessary for development and ad-hoc"
lane :match_me do
  match(
    type: "adhoc",
    app_identifier: [
        "io.getstream.reactnative.SampleApp",
    ],
    readonly: true,
    force_for_new_devices: !is_ci
  )
end

desc "Installs all Certs and Profiles necessary for appstore"
lane :match_appstore do
  match(
    type: "appstore",
    app_identifier: [
        "io.getstream.reactnative.SampleApp",
    ],
    readonly: is_ci
  )
end

platform :ios do
  desc "Deploy build to Firebase"
  lane :deploy_to_firebase do
      match_me

        gym(
            workspace: "./ios/SampleApp.xcworkspace",
            scheme: "SampleApp",
            export_method: "ad-hoc",
            export_options: "./fastlane/beta_gym_export_options.plist",
            silent: true,
            clean: true,
            include_symbols: true,
            output_directory: "./dist",
            xcargs: "ENABLE_BITCODE=1"
        )

        firebase_app_distribution(
            app: "1:190151624402:ios:403df895972564bd658f0b",
            groups: "ios-react-native-testers",
            release_notes: "Lots of amazing new features to test out!"
        )
  end
end

platform :ios do
  desc "Deploy build to TestFlight QA"
  lane :deploy_to_testflight_qa do
      app_store_connect_api_key()

      match_appstore

      settings_to_override = {
        :BUNDLE_IDENTIFIER => "io.getstream.reactnative.SampleApp",
        :PROVISIONING_PROFILE_SPECIFIER => "match AppStore io.getstream.reactnative.SampleApp"
      }

      package = load_json(json_path: "./package.json")
      increment_version_number(version_number: package["version"], xcodeproj: "./ios/SampleApp.xcodeproj")
      current_build_number = app_store_build_number(
        live: false,
        app_identifier: "io.getstream.reactnative.SampleApp",
      )
      increment_build_number(
        build_number: current_build_number + 1,
        xcodeproj: "./ios/SampleApp.xcodeproj"
      )

      gym(
          workspace: "./ios/SampleApp.xcworkspace",
          scheme: "SampleApp",
          export_method: "app-store",
          export_options: "./fastlane/testflight_gym_export_options.plist",
          silent: true,
          clean: true,
          xcargs: settings_to_override,
          include_symbols: true,
          output_directory: "./dist",
      )

      begin
        upload_to_testflight(
            groups: ['Testers'],
            changelog: "Lots of amazing new features to test out!",
            reject_build_waiting_for_review: false
        )
      rescue Exception => e
        if e.message.include? "Another build is in review"
          UI.important("Another build is already in beta review. Skipping beta review submission")
        else
          raise
        end
      end

  end
end
