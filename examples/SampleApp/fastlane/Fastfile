default_platform(:ios)

ios_bundle_id = 'io.getstream.reactnative.SampleApp'
xcode_project = './ios/SampleApp.xcodeproj'
xcode_workspace = './ios/SampleApp.xcworkspace'

before_all do
  if is_ci
    sh('git config --global user.name "Stream Bot"')
    setup_ci
  end
end

lane :deploy_to_firebase do
  match_me

  gym(
    workspace: xcode_workspace,
    scheme: 'SampleApp',
    export_method: 'ad-hoc',
    export_options: './fastlane/beta_gym_export_options.plist',
    silent: true,
    clean: true,
    include_symbols: true,
    output_directory: './dist',
    xcargs: 'ENABLE_BITCODE=1'
  )

  firebase_app_distribution(
    app: '1:190151624402:ios:403df895972564bd658f0b',
    groups: 'ios-react-native-testers',
    release_notes: 'Lots of amazing new features to test out!'
  )
end

lane :deploy_to_testflight_qa do |options|
  match_me

  settings_to_override = {
    BUNDLE_IDENTIFIER: ios_bundle_id,
    PROVISIONING_PROFILE_SPECIFIER: "match AppStore #{ios_bundle_id}"
  }

  increment_version_number(
    version_number: load_json(json_path: './package.json')['version'],
    xcodeproj: xcode_project
  )

  current_build_number = app_store_build_number(
    live: false,
    app_identifier: ios_bundle_id
  )

  increment_build_number(
    build_number: current_build_number + 1,
    xcodeproj: xcode_project
  )

  gym(
    workspace: xcode_workspace,
    scheme: 'SampleApp',
    export_method: 'app-store',
    export_options: './fastlane/testflight_gym_export_options.plist',
    silent: true,
    clean: true,
    xcargs: settings_to_override,
    include_symbols: true,
    output_directory: './dist'
  )

  if options[:deploy]
    begin
      upload_to_testflight(
        groups: ['Testers'],
        changelog: 'Lots of amazing new features to test out!',
        reject_build_waiting_for_review: false
      )
    rescue StandardError => e
      if e.message.include?('Another build is in review')
        UI.important('Another build is already in beta review. Skipping beta review submission')
      else
        UI.user_error!(e)
      end
    end
  end

  desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
  lane :match_me do
    custom_match(
      api_key: appstore_api_key,
      app_identifier: [ios_bundle_id],
      readonly: options[:readonly],
      register_device: options[:register_device]
    )
  end

  private_lane :appstore_api_key do
    @appstore_api_key ||= app_store_connect_api_key
  end
end
