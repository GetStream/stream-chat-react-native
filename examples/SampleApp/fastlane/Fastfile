default_platform(:ios)
skip_docs

github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-chat-react-native'
bundle_id = 'io.getstream.reactnative.SampleApp'
xcode_project = 'ios/SampleApp.xcodeproj'
xcode_workspace = 'ios/SampleApp.xcworkspace'
template_app_name = 'DemoApp'
bundletool_version = '1.17.1'
@force_check = false
temp_dir = Dir.mktmpdir

before_all do
  if is_ci
    setup_ci
    setup_git_config
  end
end

after_all do
  FileUtils.remove_entry(temp_dir)
end

###########################
###### Android lanes ######
###########################

lane :android_app_size do |options|
  options[:rn_project_dir] ||= create_template_project
  android_project_dir = "#{options[:rn_project_dir]}/android"
  aab_path = "#{android_project_dir}/app/build/outputs/bundle/release/app-release.aab"
  app_path = "#{android_project_dir}/app.apks"
  [aab_path, app_path].each { |f| FileUtils.rm_rf(f) if File.file?(f) }

  Dir.chdir(android_project_dir) do
    sh("./gradlew clean bundleRelease")
    sh("wget https://github.com/google/bundletool/releases/download/#{bundletool_version}/bundletool-all-#{bundletool_version}.jar -O bundletool.jar") unless File.file?('bundletool.jar')
    sh("java -jar bundletool.jar build-apks --output=#{app_path} --bundle=#{aab_path} --mode=universal")
  end

  file_size(path: app_path)
end

#######################
###### iOS lanes ######
#######################

lane :ios_app_size do |options|
  match_me unless options[:skip_match]

  root_dir = 'Build/SDKSize'
  archive_dir = "#{root_dir}/#{template_app_name}.xcarchive"
  app_path = "../#{archive_dir}/Products/Applications/#{template_app_name}.app"

  FileUtils.rm_rf("../#{root_dir}/")

  options[:rn_project_dir] ||= create_template_project
  ios_project_dir = "#{options[:rn_project_dir]}/ios"
  xcodeproj_path = "#{ios_project_dir}/#{template_app_name}.xcodeproj"
  team_id = File.read('Matchfile').match(/team_id\("(.*)"\)/)[1]

  update_code_signing_settings(
    use_automatic_signing: false,
    path: xcodeproj_path,
    team_id: team_id,
    bundle_identifier: bundle_id,
    code_sign_identity: 'iPhone Distribution',
    sdk: "iphoneos*",
    profile_name: "match AdHoc #{bundle_id}"
  )

  cocoapods(podfile: ios_project_dir, clean_install: true)

  gym(
    workspace: "#{ios_project_dir}/#{template_app_name}.xcworkspace",
    scheme: template_app_name,
    archive_path: archive_dir,
    export_method: 'ad-hoc',
    export_options: './fastlane/beta_gym_export_options.plist'
  )

  directory_size(path: app_path)
end

lane :deploy_to_testflight_qa do |options|
  match_me

  settings_to_override = {
    BUNDLE_IDENTIFIER: bundle_id,
    PROVISIONING_PROFILE_SPECIFIER: "match AppStore #{bundle_id}"
  }

  increment_version_number(
    version_number: load_json(json_path: './package.json')['version'],
    xcodeproj: xcode_project
  )

  current_build_number = app_store_build_number(
    live: false,
    app_identifier: bundle_id
  )

  increment_build_number(
    build_number: current_build_number + 1,
    xcodeproj: xcode_project
  )

  gym(
    workspace: xcode_workspace,
    scheme: 'SampleApp',
    export_method: 'app-store',
    export_options: './fastlane/testflight_gym_export_options.plist',
    silent: true,
    clean: true,
    xcargs: settings_to_override,
    include_symbols: true,
    output_directory: './dist'
  )

  if options[:deploy]
    begin
      upload_to_testflight(
        groups: ['Testers'],
        changelog: 'Lots of amazing new features to test out!',
        reject_build_waiting_for_review: false
      )
    rescue StandardError => e
      if e.message.include?('Another build is in review')
        UI.important('Another build is already in beta review. Skipping beta review submission')
      else
        UI.user_error!(e)
      end
    end
  end
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
lane :match_me do |options|
  custom_match(
    api_key: appstore_api_key,
    app_identifier: [bundle_id],
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end

##########################
###### Common lanes ######
##########################

lane :file_size do |options|
  File.size(options[:path]).to_f / 1024 / 1024
end

lane :directory_size do |options|
  total_size = 0
  Find.find(options[:path]) do |file|
    total_size += File.size(file) if File.file?(file)
  end
  total_size.to_f / 1024 / 1024
end

lane :create_template_project do
  Dir.chdir(temp_dir) do
    sh("npx @react-native-community/cli@latest init #{template_app_name} --install-pods false --package-name #{bundle_id}")
    File.absolute_path(template_app_name)
  end
end

lane :yarn_sdk do |options|
  Dir.chdir(options[:path]) do
    node_modules = [
      # FIXME: "stream-chat-react-native@https://github.com/GetStream/stream-chat-react-native.git##{current_branch}"
      'stream-chat-react-native',
      '@react-native-community/netinfo',
      '@stream-io/flat-list-mvcp',
      'add react-native-image-picker',
      'react-native-document-picker',
      'react-native-fs',
      'react-native-gesture-handler',
      'react-native-haptic-feedback',
      'react-native-haptic-feedback',
      'react-native-image-crop-picker',
      'react-native-image-resizer',
      'react-native-reanimated',
      'react-native-safe-area-context',
      'react-native-share',
      'react-native-svg'
    ]
    sh("yarn add #{node_modules.join(' ')}")
  end
end

desc 'Install all root yarn dependencies'
lane :yarn_dev do
  root = '../../..'
  Dir.chdir(root) { sh('yarn --frozen-lockfile') }
  Dir.chdir("#{root}/package") { sh('yarn --frozen-lockfile') }
  Dir.chdir("#{root}/package/native-package") { sh('yarn') }
  Dir.chdir("#{root}/package/expo-package") { sh('yarn') }
  Dir.chdir('..') { sh('yarn') }
end

lane :frameworks_sizes do
  rn_project_dir = create_template_project

  Dir.chdir(rn_project_dir) do
    sh('yarn add react-native@0.74.5')
  end

  android_app_size_without_sdk = android_app_size(rn_project_dir: rn_project_dir)
  ios_app_size_without_sdk = ios_app_size(rn_project_dir: rn_project_dir)

  yarn_sdk(path: rn_project_dir)

  android_app_size_with_sdk = android_app_size(rn_project_dir: rn_project_dir)
  ios_app_size_with_sdk = ios_app_size(rn_project_dir: rn_project_dir, skip_match: true)

  {
    android: (android_app_size_with_sdk - android_app_size_without_sdk).round(2),
    ios: (ios_app_size_with_sdk - ios_app_size_without_sdk).round(2)
  }
end

lane :show_frameworks_sizes do |options|
  # FIXME: next unless is_check_required(sources: ['package/'], force_check: @force_check)

  show_frameworks_size(
    branch_sizes: options[:sizes] || frameworks_sizes,
    github_repo: github_repo,
    sdk_names: ['iOS', 'Android']
  )
end

lane :update_img_shields_sdk_sizes do
  sizes = frameworks_sizes

  # Read the file into a string
  readme_path = '../../../README.md'
  readme_content = File.read(readme_path)

  # Define the new value for the badge
  ios_size = "#{sizes[:ios]}MB"
  android_size = "#{sizes[:android]}MB"

  # Replace the value in the badge URL
  readme_content.gsub!(%r{(https://img.shields.io/badge/iOS-)(.*?)(-blue)}, "\\1#{ios_size}\\3")
  readme_content.gsub!(%r{(https://img.shields.io/badge/Android-)(.*?)(-blue)}, "\\1#{android_size}\\3")

  # Write the updated content back to the file
  File.write(readme_path, readme_content)

  # Notify success
  UI.success('Successfully updated the SDK size labels in README.md!')
end
