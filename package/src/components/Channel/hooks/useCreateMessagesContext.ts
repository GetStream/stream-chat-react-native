import { useMemo } from 'react';

import type { MessagesContextValue } from '../../../contexts/messagesContext/MessagesContext';
import type { DefaultStreamChatGenerics } from '../../../types/types';

export const useCreateMessagesContext = <
  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,
>({
  additionalPressableProps,
  Attachment,
  AttachmentActions,
  AudioAttachment,
  Card,
  CardCover,
  CardFooter,
  CardHeader,
  channelId,
  clearQuotedMessageState,
  DateHeader,
  deletedMessagesVisibilityType,
  deleteMessage,
  deleteReaction,
  disableTypingIndicator,
  dismissKeyboardOnMessageTouch,
  enableMessageGroupingByUser,
  enableSwipeToReply,
  FileAttachment,
  FileAttachmentGroup,
  FileAttachmentIcon,
  FlatList,
  forceAlignMessages,
  Gallery,
  getMessagesGroupStyles,
  Giphy,
  giphyVersion,
  handleBan,
  handleCopy,
  handleDelete,
  handleEdit,
  handleFlag,
  handleMarkUnread,
  handleMute,
  handlePinMessage,
  handleQuotedReply,
  handleReaction,
  handleRetry,
  handleThreadReply,
  hasCreatePoll,
  ImageLoadingFailedIndicator,
  ImageLoadingIndicator,
  initialScrollToFirstUnreadMessage,
  InlineDateSeparator,
  InlineUnreadIndicator,
  isAttachmentEqual,
  isMessageAIGenerated,
  legacyImageViewerSwipeBehaviour,
  markdownRules,
  Message,
  MessageActionList,
  MessageActionListItem,
  messageActions,
  MessageAvatar,
  MessageBounce,
  MessageContent,
  messageContentOrder,
  MessageDeleted,
  MessageEditedTimestamp,
  MessageError,
  MessageFooter,
  MessageHeader,
  MessageList,
  MessageMenu,
  MessagePinnedHeader,
  MessageReactionPicker,
  MessageReplies,
  MessageRepliesAvatars,
  MessageSimple,
  MessageStatus,
  MessageSwipeContent,
  messageSwipeToReplyHitSlop,
  MessageSystem,
  MessageText,
  messageTextNumberOfLines,
  MessageTimestamp,
  MessageUserReactions,
  MessageUserReactionsAvatar,
  MessageUserReactionsItem,
  myMessageTheme,
  onLongPressMessage,
  onPressInMessage,
  onPressMessage,
  PollContent,
  ReactionListBottom,
  reactionListPosition,
  ReactionListTop,
  removeMessage,
  Reply,
  retrySendMessage,
  ScrollToBottomButton,
  selectReaction,
  sendReaction,
  setEditingState,
  setQuotedMessageState,
  shouldShowUnreadUnderlay,
  StreamingMessageView,
  supportedReactions,
  targetedMessage,
  TypingIndicator,
  TypingIndicatorContainer,
  UnreadMessagesNotification,
  updateMessage,
  UrlPreview,
  VideoThumbnail,
}: MessagesContextValue<StreamChatGenerics> & {
  /**
   * To ensure we allow re-render, when channel is changed
   */
  channelId?: string;
}) => {
  const additionalTouchablePropsLength = Object.keys(additionalPressableProps || {}).length;
  const markdownRulesLength = Object.keys(markdownRules || {}).length;
  const messageContentOrderValue = messageContentOrder.join();
  const supportedReactionsLength = supportedReactions?.length;

  const messagesContext: MessagesContextValue<StreamChatGenerics> = useMemo(
    () => ({
      additionalPressableProps,
      Attachment,
      AttachmentActions,
      AudioAttachment,
      Card,
      CardCover,
      CardFooter,
      CardHeader,
      clearQuotedMessageState,
      DateHeader,
      deletedMessagesVisibilityType,
      deleteMessage,
      deleteReaction,
      disableTypingIndicator,
      dismissKeyboardOnMessageTouch,
      enableMessageGroupingByUser,
      enableSwipeToReply,
      FileAttachment,
      FileAttachmentGroup,
      FileAttachmentIcon,
      FlatList,
      forceAlignMessages,
      Gallery,
      getMessagesGroupStyles,
      Giphy,
      giphyVersion,
      handleBan,
      handleCopy,
      handleDelete,
      handleEdit,
      handleFlag,
      handleMarkUnread,
      handleMute,
      handlePinMessage,
      handleQuotedReply,
      handleReaction,
      handleRetry,
      handleThreadReply,
      hasCreatePoll,
      ImageLoadingFailedIndicator,
      ImageLoadingIndicator,
      initialScrollToFirstUnreadMessage,
      InlineDateSeparator,
      InlineUnreadIndicator,
      isAttachmentEqual,
      isMessageAIGenerated,
      legacyImageViewerSwipeBehaviour,
      markdownRules,
      Message,
      MessageActionList,
      MessageActionListItem,
      messageActions,
      MessageAvatar,
      MessageBounce,
      MessageContent,
      messageContentOrder,
      MessageDeleted,
      MessageEditedTimestamp,
      MessageError,
      MessageFooter,
      MessageHeader,
      MessageList,
      MessageMenu,
      MessagePinnedHeader,
      MessageReactionPicker,
      MessageReplies,
      MessageRepliesAvatars,
      MessageSimple,
      MessageStatus,
      MessageSwipeContent,
      messageSwipeToReplyHitSlop,
      MessageSystem,
      MessageText,
      messageTextNumberOfLines,
      MessageTimestamp,
      MessageUserReactions,
      MessageUserReactionsAvatar,
      MessageUserReactionsItem,
      myMessageTheme,
      onLongPressMessage,
      onPressInMessage,
      onPressMessage,
      PollContent,
      ReactionListBottom,
      reactionListPosition,
      ReactionListTop,
      removeMessage,
      Reply,
      retrySendMessage,
      ScrollToBottomButton,
      selectReaction,
      sendReaction,
      setEditingState,
      setQuotedMessageState,
      shouldShowUnreadUnderlay,
      StreamingMessageView,
      supportedReactions,
      targetedMessage,
      TypingIndicator,
      TypingIndicatorContainer,
      UnreadMessagesNotification,
      updateMessage,
      UrlPreview,
      VideoThumbnail,
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      additionalTouchablePropsLength,
      channelId,
      disableTypingIndicator,
      dismissKeyboardOnMessageTouch,
      initialScrollToFirstUnreadMessage,
      markdownRulesLength,
      messageContentOrderValue,
      supportedReactionsLength,
      myMessageTheme,
      targetedMessage,
      hasCreatePoll,
    ],
  );

  return messagesContext;
};
